/*
 * Created on 20 mars 2014 ( Time 12:14:05 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
// This Bean has a composite Primary Key  


package org.demo.bean;

import java.io.Serializable;

//import javax.validation.constraints.* ;
//import org.hibernate.validator.constraints.* ;

import java.math.BigDecimal;

import javax.persistence.*;

/**
 * Persistent class for entity stored in table "BOOK_ORDER_ITEM"
 *
 * @author Telosys Tools Generator
 *
 */

@Entity
@Table(name="BOOK_ORDER_ITEM", schema="ROOT" )
// Define named queries here
@NamedQueries ( {
  @NamedQuery ( name="BookOrderItem.countAll", query="SELECT COUNT(x) FROM BookOrderItem x" )
} )
public class BookOrderItem implements Serializable
{
    private static final long serialVersionUID = 1L;

    //----------------------------------------------------------------------
    // ENTITY PRIMARY KEY ( EMBEDDED IN AN EXTERNAL CLASS )  
    //----------------------------------------------------------------------
	@EmbeddedId
    private BookOrderItemKey compositePrimaryKey ;


    //----------------------------------------------------------------------
    // ENTITY DATA FIELDS 
    //----------------------------------------------------------------------    
    @Column(name="QUANTITY", nullable=false)
    private Integer    quantity     ;

    @Column(name="PRICE", nullable=false)
    private BigDecimal price        ;



    //----------------------------------------------------------------------
    // ENTITY LINKS ( RELATIONSHIP )
    //----------------------------------------------------------------------
    @ManyToOne
    @JoinColumn(name="BOOK_ORDER_ID", referencedColumnName="ID", insertable=false, updatable=false)
    private BookOrder bookOrder   ;

    @ManyToOne
    @JoinColumn(name="BOOK_ID", referencedColumnName="ID", insertable=false, updatable=false)
    private Book book        ;


    //----------------------------------------------------------------------
    // CONSTRUCTOR(S)
    //----------------------------------------------------------------------
    public BookOrderItem()
    {
		super();
		this.compositePrimaryKey = new BookOrderItemKey();       
    }
    
    //----------------------------------------------------------------------
    // GETTER & SETTER FOR THE COMPOSITE KEY 
    //----------------------------------------------------------------------
    public void setBookOrderId( Integer bookOrderId )
    {
        this.compositePrimaryKey.setBookOrderId( bookOrderId ) ;
    }
    public Integer getBookOrderId()
    {
        return this.compositePrimaryKey.getBookOrderId() ;
    }
    public void setBookId( Integer bookId )
    {
        this.compositePrimaryKey.setBookId( bookId ) ;
    }
    public Integer getBookId()
    {
        return this.compositePrimaryKey.getBookId() ;
    }


    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR FIELDS
    //----------------------------------------------------------------------
    //--- DATABASE MAPPING : QUANTITY ( INTEGER ) 
    public void setQuantity( Integer quantity )
    {
        this.quantity = quantity;
    }
    public Integer getQuantity()
    {
        return this.quantity;
    }

    //--- DATABASE MAPPING : PRICE ( DECIMAL ) 
    public void setPrice( BigDecimal price )
    {
        this.price = price;
    }
    public BigDecimal getPrice()
    {
        return this.price;
    }


    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR LINKS
    //----------------------------------------------------------------------
    public void setBookOrder( BookOrder bookOrder )
    {
        this.bookOrder = bookOrder;
    }
    public BookOrder getBookOrder()
    {
        return this.bookOrder;
    }

    public void setBook( Book book )
    {
        this.book = book;
    }
    public Book getBook()
    {
        return this.book;
    }


    //----------------------------------------------------------------------
    // toString METHOD
    //----------------------------------------------------------------------
    public String toString() { 
        StringBuffer sb = new StringBuffer(); 
        sb.append("["); 
        if ( compositePrimaryKey != null ) {  
            sb.append(compositePrimaryKey.toString());  
        }  
        else {  
            sb.append( "(null-key)" ); 
        }  
        sb.append("]:"); 
        sb.append(quantity);
        sb.append("|");
        sb.append(price);
        return sb.toString(); 
    } 

}